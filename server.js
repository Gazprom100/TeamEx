const express = require('express');
const axios = require('axios');
const cors = require('cors');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
// ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const adminChatId = process.env.ADMIN_CHAT_ID;
// API –∫–ª—é—á –¥–ª—è bitteam
const bitteamApiKey = process.env.BT_API;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'build')));

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ USDT —Å –±–∏—Ä–∂–∏ bitteam
app.get('/api/rates', async (req, res) => {
  try {
    const response = await axios.get('https://api.bitteam.com/market/ticker/USDT_RUB');
    
    // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const rates = {
      buy: parseFloat(response.data?.last || '97.5'), 
      sell: parseFloat(response.data?.last || '95.5') * 0.98, // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–µ–¥ 2%
    };
    
    res.json(rates);
  } catch (error) {
    console.error('Error fetching rates:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    res.json({
      buy: 97.5,
      sell: 95.5,
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
app.post('/api/orders', async (req, res) => {
  try {
    const { 
      user_id, 
      username, 
      type, 
      amount, 
      total, 
      payment_method, 
      card_number 
    } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!user_id || !type || !amount || !total || !payment_method) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    
    if (type === 'buy' && !card_number) {
      return res.status(400).json({ error: 'Card number is required for buying USDT' });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    let adminMessage = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ ${type === 'buy' ? '–ø–æ–∫—É–ø–∫—É' : '–ø—Ä–æ–¥–∞–∂—É'} USDT*\n\n`;
    adminMessage += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username ? '@' + username : 'ID: ' + user_id}\n`;
    adminMessage += `üí∞ –°—É–º–º–∞: ${amount} ${type === 'buy' ? 'RUB' : 'USDT'}\n`;
    adminMessage += `üíµ –ò—Ç–æ–≥–æ: ${total} ${type === 'buy' ? 'USDT' : 'RUB'}\n`;
    adminMessage += `üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${payment_method}\n`;
    
    if (type === 'buy' && card_number) {
      // –ú–∞—Å–∫–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const maskedCard = card_number.substring(0, 4) + ' **** **** ' + card_number.substring(12);
      adminMessage += `üí≥ –ö–∞—Ä—Ç–∞: ${maskedCard}\n`;
    }
    
    // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const adminId = process.env.ADMIN_TELEGRAM_ID;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if (adminId) {
      await bot.sendMessage(adminId, adminMessage, { parse_mode: 'Markdown' });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    let userMessage = `‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞*\n\n`;
    userMessage += `–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞ USDT' : '–ü—Ä–æ–¥–∞–∂–∞ USDT'}\n`;
    userMessage += `–°—É–º–º–∞: ${amount} ${type === 'buy' ? 'RUB' : 'USDT'}\n`;
    userMessage += `–ò—Ç–æ–≥–æ: ${total} ${type === 'buy' ? 'USDT' : 'RUB'}\n\n`;
    userMessage += `‚è± –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏.`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.sendMessage(user_id, userMessage, { parse_mode: 'Markdown' });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
    // await Order.create({ ... });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({ success: true, message: 'Order created successfully' });
  } catch (error) {
    console.error('Error creating order:', error);
    res.status(500).json({ error: 'Failed to create order' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ webhook
app.post('/webhook', (req, res) => {
  if (req.body.message) {
    const chatId = req.body.message.chat.id;
    const text = req.body.message.text || '';
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (text === '/start') {
      const startMessage = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ USDT.\n\n` +
        `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`;
        
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–º–µ–Ω—è—Ç—å USDT', web_app: { url: process.env.WEBAPP_URL || 'https://teamex-exchange.vercel.app' } }]
        ]
      };
      
      bot.sendMessage(chatId, startMessage, { 
        reply_markup: JSON.stringify(keyboard) 
      });
    }
  }
  
  res.sendStatus(200);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è SPA (–µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ –±—ç–∫–µ–Ω–¥ –Ω–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ)
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const startMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ USDT.\n\n` +
    `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`;
    
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîÑ –û–±–º–µ–Ω—è—Ç—å USDT', web_app: { url: process.env.WEBAPP_URL || 'https://teamex-exchange.vercel.app' } }]
    ]
  };
  
  bot.sendMessage(chatId, startMessage, { 
    reply_markup: keyboard 
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.on('message', (msg) => {
  if (!msg.text || !msg.text.startsWith('/')) return;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  if (msg.text === '/start') return;
  
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±–º–µ–Ω—É:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîÑ –û–±–º–µ–Ω—è—Ç—å USDT', web_app: { url: process.env.WEBAPP_URL || 'https://teamex-exchange.vercel.app' } }]
      ]
    }
  });
}); 